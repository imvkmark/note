"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5384],{8810:(e,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a={key:"v-37ee6ea2",path:"/os/linux/ssh-login.html",title:"[转+] 设置 SSH 安全通过密钥,免密码登录服务器",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"服务器上制作密钥",slug:"服务器上制作密钥",children:[]},{level:2,title:"客户端配置私钥 config 配置",slug:"客户端配置私钥-config-配置",children:[]}],filePathRelative:"os/linux/ssh-login.md",git:{updatedTime:1629648513e3,contributors:[{name:"duoli",email:"zhaody901@126.com",commits:1}]}}},2136:(e,s,n)=>{n.r(s),n.d(s,{default:()=>b});var a=n(6252);const t=(0,a._)("h1",{id:"转-设置-ssh-安全通过密钥-免密码登录服务器",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#转-设置-ssh-安全通过密钥-免密码登录服务器","aria-hidden":"true"},"#"),(0,a.Uk)(" [转+] 设置 SSH 安全通过密钥,免密码登录服务器")],-1),l=(0,a.Uk)("原文地址: "),i={href:"https://hyjk2000.github.io/2012/03/16/how-to-set-up-ssh-keys/",target:"_blank",rel:"noopener noreferrer"},r=(0,a.Uk)("设置 SSH通过密钥登录"),c=(0,a.uE)('<p>我们一般使用 PuTTY 等 SSH 客户端来远程管理 Linux 服务器。但是，一般的密码方式登录，容易有密码被暴力破解的问题。所以，一般我们会将 SSH 的端口设置为默认的 22 以外的端口，或者禁用 root 账户登录。其实，有一个更好的办法来保证安全，而且让你可以放心地用 root 账户从远程登录------那就是通过密钥方式登录。</p><p>密钥形式登录的原理是：利用密钥生成器制作一对密钥------一只公钥和一只私钥。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这样一来，没有私钥，任何人都无法通过 SSH 暴力破解你的密码来远程登录到系统。此外，如果将公钥复制到其他账户甚至主机，利用私钥也可以登录。</p><h2 id="服务器上制作密钥" tabindex="-1"><a class="header-anchor" href="#服务器上制作密钥" aria-hidden="true">#</a> 服务器上制作密钥</h2><p>下面来讲解如何在 Linux 服务器上制作密钥对，将公钥添加给账户，设置 SSH，最后通过客户端登录。</p><p><strong>1. 制作密钥对</strong></p><p>首先在服务器上制作密钥对。首先用密码登录到你打算使用密钥登录的账户，然后执行以下命令：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ cd ~/\n$ ssh-keygen  *\n// or\n$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>密钥锁码在使用私钥时必须输入，这样就可以保护私钥不被盗用。当然，也可以留空，实现无密码登录。</p><p>现在，在 root 用户的 <code>home</code> 目录中生成了一个 .ssh 的隐藏目录，内含两个密钥文件。id_rsa 为私钥，id_rsa.pub 为公钥。</p><p><strong>2. 在服务器上安装公钥</strong></p><p>键入以下命令，在服务器上安装公钥：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ cd .ssh\n$ cat id_rsa.pub &gt;&gt; authorized_keys\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ chmod 600 authorized_keys\n$ chmod 700 ~/.ssh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3. 设置 SSH，打开密钥登录功能</strong></p><p>编辑 <code>/etc/ssh/sshd_config</code> 文件，进行如下设置：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>RSAAuthentication yes\nPubkeyAuthentication yes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>另外，请留意 root 用户能否通过 SSH 登录：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>PermitRootLogin yes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>PasswordAuthentication no\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后，重启 SSH 服务：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ systemctl restart sshd\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="客户端配置私钥-config-配置" tabindex="-1"><a class="header-anchor" href="#客户端配置私钥-config-配置" aria-hidden="true">#</a> 客户端配置私钥 config 配置</h2><p>很多时候，我们开发可能需要连接多台远程服务器，并且需要配置 git 服务器的私钥。那么这么多的服务器不能共用一套私钥，不同的服务器应该使用不同的私钥。但是我们从上面的连接流程可以看到，ssh 默认是去读取 <code>$HOME/.ssh/id_rsa</code> 文件作为私钥登录的。如果想要不同的服务器使用不同的私钥进行登录，那么需要在 <code>.ssh</code> 目录下编写 <code>config</code> 文件来进行配置。</p><p><code>config</code> 的配置很简单，只要指明哪个用户登录哪台远程服务器需要使用哪个私钥即可。下面给出一个配置示例。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Host github.com\n    User jaychen\n    IdentityFile ~/.ssh/id_rsa.github\nHost 192.168.1.1\n    User ubuntu\n    IdentityFile ~/.ssh/id_rsa.xxx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>另一种方式</strong> 支持名字的映射</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Host test-liexiang\n    HostName 192.168.1.21\n    User liexiang\n    IdentityFile ~/.ssh/test-liexiang\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面 <code>config</code> 文件字段含义如下：</p><ul><li>Host 指明了远程主机的 ip，除了使用 ip 地址，也可以直接使用网址。</li><li>User 指的是登录远程主机的用户。</li><li>IdentityFile 指明使用哪个私钥文件。</li></ul><p>编写好 <code>config</code> 文件之后，需要把 <code>config</code> 文件的权限改为 <code>rw-r--r--</code> 。如果权限过大，ssh 会禁止登录。</p><p>参考文章:</p>',33),d={href:"https://juejin.im/post/5a2941ad6fb9a045030ffc95",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("SSH密钥登录流程分析"),p={href:"https://deepzz.com/post/github-generate-ssh-key.html",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("Github ssh key生成，免密登录服务器方法"),b={render:function(e,s){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,(0,a._)("p",null,[l,(0,a._)("a",i,[r,(0,a.Wm)(n)])]),c,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",d,[o,(0,a.Wm)(n)])]),(0,a._)("li",null,[(0,a._)("a",p,[u,(0,a.Wm)(n)])])])],64)}}}}]);