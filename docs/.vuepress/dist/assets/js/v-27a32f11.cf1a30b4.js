"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3312],{7699:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-27a32f11",path:"/nginx/example/location.html",title:"[转] nginx 配置 location 总结及 rewrite 规则写法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. location正则写法",slug:"_1-location正则写法",children:[{level:3,title:"实际使用建议",slug:"实际使用建议",children:[]}]},{level:2,title:"2. Rewrite规则",slug:"_2-rewrite规则",children:[{level:3,title:"2.1 flag标志位",slug:"_2-1-flag标志位",children:[]},{level:3,title:"2.2 if指令与全局变量",slug:"_2-2-if指令与全局变量",children:[]},{level:3,title:"2.3 常用正则",slug:"_2-3-常用正则",children:[]},{level:3,title:"2.4 rewrite实例",slug:"_2-4-rewrite实例",children:[]}]}],filePathRelative:"nginx/example/location.md",git:{updatedTime:1629648513e3,contributors:[{name:"duoli",email:"zhaody901@126.com",commits:1}]}}},4938:(n,s,e)=>{e.r(s),e.d(s,{default:()=>z});var a=e(6252);const l=(0,a.uE)('<h1 id="转-nginx-配置-location-总结及-rewrite-规则写法" tabindex="-1"><a class="header-anchor" href="#转-nginx-配置-location-总结及-rewrite-规则写法" aria-hidden="true">#</a> [转] nginx 配置 location 总结及 rewrite 规则写法</h1><h2 id="_1-location正则写法" tabindex="-1"><a class="header-anchor" href="#_1-location正则写法" aria-hidden="true">#</a> 1. location正则写法</h2><p>一个示例：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span>  = /</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 精确匹配 / ，主机名后面不能带任何字符串</span>\n  [ configuration A ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span>  /</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span>\n  <span class="token comment"># 但是正则和最长字符串会优先匹配</span>\n  [ configuration B ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> /documents/</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span>\n  <span class="token comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span>\n  [ configuration C ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> ~ /documents/Abc</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</span>\n  <span class="token comment"># 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span>\n  [ configuration CC ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> ^~ /images/</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span>\n  [ configuration D ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> ~* \\.(gif|jpg|jpeg)$</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 匹配所有以 gif,jpg或jpeg 结尾的请求</span>\n  <span class="token comment"># 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span>\n  [ configuration E ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> /images/</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span>\n  [ configuration F ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> /images/abc</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span>\n  <span class="token comment"># F与G的放置顺序是没有关系的</span>\n  [ configuration G ]\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> ~ /images/abc/</span> <span class="token punctuation">{</span>\n  <span class="token comment"># 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span>\n    [ configuration H ]\n<span class="token punctuation">}</span>\n\nlocation ~* /js/.*/\\.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><ul><li>以 <code>=</code> 开头表示精确匹配 如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</li><li><code>^~</code> 开头表示uri以某个常规字符串开头，不是正则匹配</li><li><code>~</code> 开头表示区分大小写的正则匹配;</li><li><code>~*</code> 开头表示不区分大小写的正则匹配</li><li><code>/</code> 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li></ul><p>顺序 no优先级： (location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p><p>上面的匹配结果 按照上面的location写法，以下的匹配示例成立：</p><ul><li>/ -&gt; config A 精确完全匹配，即使/index.html也匹配不了</li><li>/downloads/download.html -&gt; config B 匹配B以后，往下没有任何匹配，采用B</li><li>/images/1.gif -&gt; configuration D 匹配到F，往下匹配到D，停止往下</li><li>/images/abc/def -&gt; config D 最长匹配到G，往下匹配D，停止往下 你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序</li><li>/documents/document.html -&gt; config C 匹配到C，往下没有任何匹配，采用C</li><li>/documents/1.jpg -&gt; configuration E 匹配到C，往下正则匹配到E</li><li>/documents/Abc.jpg -&gt; config CC 最长匹配到C，往下正则顺序匹配到CC，不会往下到E</li></ul><h3 id="实际使用建议" tabindex="-1"><a class="header-anchor" href="#实际使用建议" aria-hidden="true">#</a> 实际使用建议</h3><p>所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。\n#这里是直接转发给后端应用服务器了，也可以是一个静态首页\n# 第一个必选规则\nlocation = / {\n    proxy_pass [http://tomcat](http://tomcat/):8080/index\n}\n\n# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项\n# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用\nlocation ^~ /static/ {\n    root /webroot/static/;\n}\n\nlocation ~* \\.(gif|jpg|jpeg|png|css|js|ico)$ {\n    root /webroot/res/;\n}\n\n#第三个规则就是通用规则，用来转发动态请求到后端应用服务器\n#非静态文件请求就默认是动态请求，自己根据实际把握\n#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了\nlocation / {\n    proxy_pass [http://tomcat](http://tomcat/):8080/\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',11),p={href:"http://tengine.taobao.org/book/chapter_02.html",target:"_blank",rel:"noopener noreferrer"},t=(0,a.Uk)("http://tengine.taobao.org/book/chapter_02.html"),i={href:"http://nginx.org/en/docs/http/ngx_http_rewrite_module.html",target:"_blank",rel:"noopener noreferrer"},o=(0,a.Uk)("http://nginx.org/en/docs/http/ngx_http_rewrite_module.html"),r=(0,a.uE)('<h2 id="_2-rewrite规则" tabindex="-1"><a class="header-anchor" href="#_2-rewrite规则" aria-hidden="true">#</a> 2. Rewrite规则</h2><p>rewrite 功能就是，使用 nginx 提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite 只能放在<code>server{}</code>, <code>location{}</code>, <code>if{}</code> 中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <code>http://seanlook.com/a/we/index.php?id=1&amp;u=str</code> 只对/a/we/index.php重写。语法<code>rewrite regex replacement [flag];</code></p><p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用 proxy_pass 反向代理。</p><p>表面看 <code>rewrite</code> 和 <code>location</code> 功能有点像，都能实现跳转，主要区别在于 rewrite 是在同一域名内更改获取资源的路径，而 location 是对一类路径做控制访问或反向代理，可以 <code>proxy_pass</code> 到其他机器。很多情况下 rewrite 也会写在 location 里，它们的执行顺序是：</p><ol><li>执行 server 块的 rewrite 指令</li><li>执行 location 匹配</li><li>执行选定的 location 中的 rewrite 指令</li></ol><p>如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</p><h3 id="_2-1-flag标志位" tabindex="-1"><a class="header-anchor" href="#_2-1-flag标志位" aria-hidden="true">#</a> 2.1 flag标志位</h3><ul><li><code>last</code> : 相当于Apache的[L]标记，表示完成rewrite</li><li><code>break</code> : 停止执行当前虚拟主机的后续rewrite指令集</li><li><code>redirect</code> : 返回302临时重定向，地址栏会显示跳转后的地址</li><li><code>permanent</code> : 返回301永久重定向，地址栏会显示跳转后的地址</li></ul><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ol><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止<em>重写后</em>的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ol><h3 id="_2-2-if指令与全局变量" tabindex="-1"><a class="header-anchor" href="#_2-2-if指令与全局变量" aria-hidden="true">#</a> 2.2 if指令与全局变量</h3><p><strong>if判断指令</strong> 语法为<code>if(condition){...}</code>，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行，if条件(conditon)可以是如下任何内容：</p><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用<code>=</code>或<code>!=</code></li><li><code>~</code>正则表达式匹配，<code>~*</code>不区分大小写的匹配，<code>!~</code>区分大小写的不匹配</li></ul><p><code>-f</code>和<code>!-f</code>用来判断是否存在文件 <code>-d</code>和<code>!-d</code>用来判断是否存在目录 <code>-e</code>和<code>!-e</code>用来判断是否存在文件或目录 <code>-x</code>和<code>!-x</code>用来判断文件是否可执行</p><p>例如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\nif ($http_user_agent ~ MSIE) {\n    rewrite ^(.*)$ /msie/$1 break;\n} //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下\n\nif ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) {\n    set $id $1;\n } //如果cookie匹配正则，设置变量$id等于正则引用部分\n\nif ($request_method = POST) {\n    return 405;\n} //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302\n\nif ($slow) {\n    limit_rate 10k;\n} //限速，$slow可以通过 set 指令设置\n\nif (!-f $request_filename){\n    break;\n    proxy_pass  http://127.0.0.1;\n} //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查\n\nif ($args ~ post=140){\n    rewrite ^ http://[example.com/](http://example.com/) permanent;\n} //如果query string中包含&quot;post=140&quot;，永久重定向到example.com\n\nlocation ~* \\.(gif|jpg|png|swf|flv)$ {\n    valid_referers none blocked [www.jefflei.com](http://www.jefflei.com/) [www.leizhenfang.com](http://www.leizhenfang.com/);\n    if ($invalid_referer) {\n        return 404;\n    } //防盗链\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>全局变量</strong> 下面是可以用作if判断的全局变量</p><ul><li><code>$args</code> ： #这个变量等于请求行中的参数，同<code>$query_string</code></li><li><code>$content_length</code> ： 请求头中的Content-length字段。</li><li><code>$content_type</code> ： 请求头中的Content-Type字段。</li><li><code>$document_root</code> ： 当前请求在root指令中指定的值。</li><li><code>$host</code> ： 请求主机头字段，否则为服务器名称。</li><li><code>$http_user_agent</code> ： 客户端agent信息</li><li><code>$http_cookie</code> ： 客户端cookie信息</li><li><code>$limit_rate</code> ： 这个变量可以限制连接速率。</li><li><code>$request_method</code> ： 客户端请求的动作，通常为GET或POST。</li><li><code>$remote_addr</code> ： 客户端的IP地址。</li><li><code>$remote_port</code> ： 客户端的端口。</li><li><code>$remote_user</code> ： 已经经过Auth Basic Module验证的用户名。</li><li><code>$request_filename</code> ： 当前请求的文件路径，由root或alias指令与URI请求生成。</li><li><code>$scheme</code> ： HTTP方法（如http，https）。</li><li><code>$server_protocol</code> ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</li><li><code>$server_addr</code> ： 服务器地址，在完成一次系统调用后可以确定这个值。</li><li><code>$server_name</code> ： 服务器名称。</li><li><code>$server_port</code> ： 请求到达服务器的端口号。</li><li><code>$request_uri</code> ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</li><li><code>$uri</code> ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</li><li><code>$document_uri</code> ： 与$uri相同。</li></ul>',18),c=(0,a.Uk)("例："),u=(0,a._)("code",null,"http://localhost:88/test1/test2/test.php",-1),b=(0,a.Uk)(" $host：localhost $server_port：88 $request_uri："),d={href:"http://localhost:88/test1/test2/test.php",target:"_blank",rel:"noopener noreferrer"},m=(0,a.Uk)("http://localhost:88/test1/test2/test.php"),g=(0,a.Uk)(" $document_uri：/test1/test2/test.php $document_root：/var/www/html $request_filename：/var/www/html/test1/test2/test.php"),k=(0,a.uE)('<h3 id="_2-3-常用正则" tabindex="-1"><a class="header-anchor" href="#_2-3-常用正则" aria-hidden="true">#</a> 2.3 常用正则</h3><ul><li><code>.</code> ： 匹配除换行符以外的任意字符</li><li><code>?</code> ： 重复0次或1次</li><li><code>+</code> ： 重复1次或更多次</li><li><code>*</code> ： 重复0次或更多次</li><li><code>\\d</code> ：匹配数字</li><li><code>^</code> ： 匹配字符串的开始</li><li>` ： 匹配字符串的介绍</li><li><code>{n}</code> ： 重复n次</li><li><code>{n,}</code> ： 重复n次或更多次</li><li><code>[c]</code> ： 匹配单个字符c</li><li><code>[a-z]</code> ： 匹配a-z小写字母的任意一个</li></ul><p>小括号<code>()</code>之间匹配的内容，可以在后面通过<code>$1</code>来引用，<code>$2</code>表示的是前面第二个<code>()</code>里的内容。正则里面容易让人困惑的是<code>\\</code>转义特殊字符。</p><h3 id="_2-4-rewrite实例" tabindex="-1"><a class="header-anchor" href="#_2-4-rewrite实例" aria-hidden="true">#</a> 2.4 rewrite实例</h3><p><em>例1</em>：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>\n\n    <span class="token comment"># 定义image日志格式</span>\n    <span class="token directive"><span class="token keyword">log_format</span> imagelog <span class="token string">&#39;[<span class="token variable">$time_local]</span> &#39;</span> <span class="token variable">$image_file</span> <span class="token string">&#39; &#39;</span> <span class="token variable">$image_type</span> <span class="token string">&#39; &#39;</span> <span class="token variable">$body_bytes_sent</span> <span class="token string">&#39; &#39;</span> <span class="token variable">$status</span></span><span class="token punctuation">;</span>\n\n    <span class="token comment"># 开启重写日志</span>\n    <span class="token directive"><span class="token keyword">rewrite_log</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>\n\n    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">root</span> /home/www</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n            <span class="token comment"># 重写规则信息</span>\n            <span class="token directive"><span class="token keyword">error_log</span> logs/rewrite.log notice</span><span class="token punctuation">;</span>\n            <span class="token comment"># 注意这里要用‘’单引号引起来，避免{}</span>\n            <span class="token directive"><span class="token keyword">rewrite</span> <span class="token string">&#39;^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\\.(png|jpg|gif)&#39;</span> /data?file=<span class="token variable">$3</span>.<span class="token variable">$4</span></span><span class="token punctuation">;</span>\n            <span class="token comment"># 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span>\n            <span class="token directive"><span class="token keyword">set</span> <span class="token variable">$image_file</span> <span class="token variable">$3</span></span><span class="token punctuation">;</span>\n            <span class="token directive"><span class="token keyword">set</span> <span class="token variable">$image_type</span> <span class="token variable">$4</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token directive"><span class="token keyword">location</span> /data</span> <span class="token punctuation">{</span>\n             <span class="token comment"># 指定针对图片的日志格式，来分析图片类型和大小</span>\n             <span class="token directive"><span class="token keyword">access_log</span> logs/images.log mian</span><span class="token punctuation">;</span>\n             <span class="token directive"><span class="token keyword">root</span> /data/images</span><span class="token punctuation">;</span>\n             <span class="token comment"># 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span>\n             <span class="token directive"><span class="token keyword">try_files</span> /<span class="token variable">$arg_file</span> /image404.html</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token directive"><span class="token keyword">location</span> = /image404.html</span> <span class="token punctuation">{</span>\n            <span class="token comment"># 图片不存在返回特定的信息</span>\n            <span class="token directive"><span class="token keyword">return</span> <span class="token number">404</span> <span class="token string">&quot;image not found<span class="token escape entity">\\n</span>&quot;</span></span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>对形如<code>/images/ef/uh7b3/test.png</code>的请求，重写到<code>/data?file=test.png</code>，于是匹配到<code>location /data</code>，先看<code>/data/images/test.png</code>文件存不存在，如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。</p><p><em>例2</em>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>rewrite ^/images/(.*)_(\\d+)x(\\d+)\\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>对形如<code>/images/bla_500x400.jpg</code>的文件请求，重写到<code>/resizer/bla.jpg?width=500&amp;height=400</code>地址，并会继续尝试匹配location。</p>',10),h=(0,a._)("em",null,"例3",-1),f=(0,a.Uk)("： 见 "),w={href:"http://seanlook.com/2015/05/28/nginx-ssl",target:"_blank",rel:"noopener noreferrer"},_=(0,a.Uk)("ssl部分页面加密"),v=(0,a.Uk)(" 。"),x=(0,a._)("p",null,[(0,a._)("strong",null,"参考")],-1),$={href:"http://www.nginx.cn/216.html",target:"_blank",rel:"noopener noreferrer"},y=(0,a.Uk)("http://www.nginx.cn/216.html"),j={href:"http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/",target:"_blank",rel:"noopener noreferrer"},U=(0,a.Uk)("http://www.ttlsa.com/nginx/nginx-rewriting-rules-guide/"),q=(0,a._)("li",null,"老僧系列nginx之rewrite规则快速上手",-1),C={href:"http://fantefei.blog.51cto.com/2229719/919431",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("http://fantefei.blog.51cto.com/2229719/919431"),z={render:function(n,s){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[(0,a._)("a",p,[t,(0,a.Wm)(e)]),(0,a._)("a",i,[o,(0,a.Wm)(e)])]),r,(0,a._)("p",null,[c,u,b,(0,a._)("a",d,[m,(0,a.Wm)(e)]),g]),k,(0,a._)("p",null,[h,f,(0,a._)("a",w,[_,(0,a.Wm)(e)]),v]),x,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",$,[y,(0,a.Wm)(e)])]),(0,a._)("li",null,[(0,a._)("a",j,[U,(0,a.Wm)(e)])]),q,(0,a._)("li",null,[(0,a._)("a",C,[T,(0,a.Wm)(e)])])])],64)}}}}]);