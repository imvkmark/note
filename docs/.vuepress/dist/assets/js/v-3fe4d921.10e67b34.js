"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9682],{5918:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-3fe4d921",path:"/nginx/example/echo.html",title:"学习使用 echo 模块",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"使用",slug:"使用",children:[{level:3,title:"echo - 输出字符",slug:"echo-输出字符",children:[]},{level:3,title:"echo_before_body，echo_after_body - 页面前、后插入内容",slug:"echo-before-body-echo-after-body-页面前、后插入内容",children:[]},{level:3,title:"echo_sleep - 请求等待",slug:"echo-sleep-请求等待",children:[]},{level:3,title:"echo_location_async，echo_location - 请求指定路径",slug:"echo-location-async-echo-location-请求指定路径",children:[]},{level:3,title:"echo_foreach_split - 分隔循环",slug:"echo-foreach-split-分隔循环",children:[]}]},{level:2,title:"link",slug:"link",children:[]}],filePathRelative:"nginx/example/echo.md",git:{updatedTime:1629648513e3,contributors:[{name:"duoli",email:"zhaody901@126.com",commits:1}]}}},1706:(e,n,s)=>{s.r(n),s.d(n,{default:()=>I});var a=s(6252);const l=(0,a._)("h1",{id:"学习使用-echo-模块",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#学习使用-echo-模块","aria-hidden":"true"},"#"),(0,a.Uk)(" 学习使用 echo 模块")],-1),o=(0,a.Uk)("Nginx echo模块是在nginx程序上扩展了 "),c=(0,a._)("code",null,"echo",-1),r=(0,a.Uk)(" 输出字符的功能，对于调试很方便，项目地址: "),i={href:"https://github.com/openresty/echo-nginx-module",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("https://github.com/openresty/echo-nginx-module"),b=(0,a.Uk)(" 。"),u=(0,a._)("h2",{id:"安装",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),(0,a.Uk)(" 安装")],-1),t=(0,a.Uk)("目前支持 "),d=(0,a._)("code",null,"nginx-1.11.2",-1),h=(0,a.Uk)("，高版本可能安装失败，我装 "),m=(0,a._)("code",null,"1.11.13",-1),_=(0,a.Uk)(" 失败了，更多支持nginx的版本见: "),g={href:"https://github.com/openresty/echo-nginx-module#compatibility",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("https://github.com/openresty/echo-nginx-module#compatibility"),v=(0,a.Uk)("去 "),y={href:"https://github.com/openresty/echo-nginx-module/releases",target:"_blank",rel:"noopener noreferrer"},x=(0,a.Uk)("release"),k=(0,a.Uk)(" 下载最新的安装包，并解压."),U=(0,a.Uk)("在配置 Nginx 时用: "),q=(0,a._)("code",null,"./configure --add-module=/你的解压路径",-1),w=(0,a.Uk)("，并编译安装，如果是重新编译安装可参考: "),$=(0,a.Uk)("重新编译安装"),E=(0,a.uE)('<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><blockquote><p>只是研究了一些常用的</p></blockquote><h3 id="echo-输出字符" tabindex="-1"><a class="header-anchor" href="#echo-输出字符" aria-hidden="true">#</a> echo - 输出字符</h3><ul><li>语法: <code>echo [options] &lt;string&gt;...</code></li><li>默认值: <code>no</code></li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code># 简单的hello，world!\nserver {\n    location = /api/hello {\n        echo &quot;hello，world!&quot;;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>默认echo会自动换行，不需要换行可以: <code>echo -n xxx;</code>;</p><h3 id="echo-before-body-echo-after-body-页面前、后插入内容" tabindex="-1"><a class="header-anchor" href="#echo-before-body-echo-after-body-页面前、后插入内容" aria-hidden="true">#</a> echo_before_body，echo_after_body - 页面前、后插入内容</h3><ul><li>语法: <code>echo_before_body [options] [argument]...</code></li><li>默认值: <code>no</code></li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>server {\n    # 简单的输出\n    location = /api/hello {\n        echo_before_body echo_before_body;\n        echo &quot;hello，world!&quot;;\n        echo_after_body echo_after_body;\n    }\n\n    # 常见于代理页面前、后插内容\n    location = /api/proxy_before_after {\n        echo_before_body echo_before_body;\n        echo_before_body echo_before_body;\n        proxy_pass http://127.0.0.1;\n        echo_after_body echo_after_body;\n        echo_after_body echo_after_body;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="echo-sleep-请求等待" tabindex="-1"><a class="header-anchor" href="#echo-sleep-请求等待" aria-hidden="true">#</a> echo_sleep - 请求等待</h3><ul><li>语法: <code>echo_sleep &lt;seconds&gt;</code></li><li>默认值: <code>no</code></li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>server {\n    # 简单的输出\n    location = /api/sleep {\n        echo 1;\n\n        # 等待1秒\n        echo_sleep 1;\n\n        echo 2;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="echo-location-async-echo-location-请求指定路径" tabindex="-1"><a class="header-anchor" href="#echo-location-async-echo-location-请求指定路径" aria-hidden="true">#</a> echo_location_async，echo_location - 请求指定路径</h3><ul><li>语法: <code>echo_location_async &lt;location&gt; [&lt;url_args&gt;]</code></li><li>默认值: <code>no</code></li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>location /main {\n    # 异步调用/sub\n    echo_location_async /sub;\n\n    echo world;\n}\n\nlocation /main2 {\n    # 同步调用/sub\n    echo_location_async /sub;\n\n    echo world;\n}\n\nlocation /sub {\n    echo hello;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>异步跟同步的区别是:</p><ol><li>异步会并行的去请求</li><li>同步等待当前请求结束才会往下执行</li></ol><p>下面这个整个时间为2s，因为新路径最大是2s:</p><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code> location /main {\n     echo_location_async /sub1;\n     echo_location_async /sub2;\n     echo &quot;took $echo_timer_elapsed sec for total.&quot;;\n }\n location /sub1 {\n     echo_sleep 2;\n }\n location /sub2 {\n     echo_sleep 1;\n }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>下面这个整个时间为3s，因为需要等待<code>/sub1</code>完成才进入<code>/sub2</code>:</p><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code> location /main {\n     echo_location /sub1;\n     echo_location /sub2;\n     echo &quot;took $echo_timer_elapsed sec for total.&quot;;\n }\n location /sub1 {\n     echo_sleep 2;\n }\n location /sub2 {\n     echo_sleep 1;\n }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以通过第二个参数传<code>querystring</code>: <code>echo_location_async /sub &#39;foo=Foo&amp;bar=Bar&#39;;</code></p><h3 id="echo-foreach-split-分隔循环" tabindex="-1"><a class="header-anchor" href="#echo-foreach-split-分隔循环" aria-hidden="true">#</a> echo_foreach_split - 分隔循环</h3><ul><li>语法: <code>echo_foreach_split &lt;delimiter&gt; &lt;string&gt;</code></li></ul><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>location /split {\n    echo_foreach_split &#39;,&#39; $arg_list;\n        echo &quot;item: $echo_it&quot;;\n    echo_end;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面配置当访问: <code>/split?list=cat,dog,mouse</code> 时会输出:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>item: cat\nitem: dog\nitem: mouse\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>$arg_list</code>是对应<code>$args.list</code></p><p>那么配置全<code>echo_location_async</code>可以做成<code>nginx-combo</code>服务了，如:</p><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>location = /api/combo {\n    echo_foreach_split &#39;,&#39; $query_string;\n        echo &quot;/* combo: $echo_it */&quot;;\n        echo_location_async $echo_it;\n        echo;\n    echo_end;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',30),W=(0,a.Uk)("访问: "),C=(0,a._)("code",null,"/api/combo?/a.js,/b.js",-1),A=(0,a.Uk)("，需要注意的是文件的路径必须以"),B=(0,a._)("code",null,"/",-1),D=(0,a.Uk)("开始，因为匹配的"),N=(0,a._)("code",null,"location",-1),j=(0,a.Uk)("，当然真的 "),z=(0,a._)("code",null,"nginx-combo",-1),F=(0,a.Uk)(" 服务请看: "),L=(0,a.Uk)("nginx-http-concat"),R=(0,a._)("hr",null,null,-1),H=(0,a._)("p",null,"其他变量请去官网查看~",-1),O=(0,a._)("h2",{id:"link",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#link","aria-hidden":"true"},"#"),(0,a.Uk)(" link")],-1),P={href:"https://github.com/openresty/echo-nginx-module",target:"_blank",rel:"noopener noreferrer"},T=(0,a.Uk)("官网"),Y={href:"//echo.xuexb.com",target:"_blank",rel:"noopener noreferrer"},G=(0,a.Uk)("我写的在线Demo"),I={render:function(e,n){const s=(0,a.up)("OutboundLink"),I=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[l,(0,a._)("p",null,[o,c,r,(0,a._)("a",i,[p,(0,a.Wm)(s)]),b]),u,(0,a._)("blockquote",null,[(0,a._)("p",null,[t,d,h,m,_,(0,a._)("a",g,[f,(0,a.Wm)(s)])])]),(0,a._)("p",null,[v,(0,a._)("a",y,[x,(0,a.Wm)(s)]),k]),(0,a._)("p",null,[U,q,w,(0,a.Wm)(I,{to:"/guide/linux-install.html#%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85"},{default:(0,a.w5)((()=>[$])),_:1})]),E,(0,a._)("p",null,[W,C,A,B,D,N,j,z,F,(0,a.Wm)(I,{to:"/example/http-concat.html"},{default:(0,a.w5)((()=>[L])),_:1})]),R,H,O,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",P,[T,(0,a.Wm)(s)])]),(0,a._)("li",null,[(0,a._)("a",Y,[G,(0,a.Wm)(s)])])])],64)}}}}]);