"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2185],{4225:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-57a8adba",path:"/nginx/example/nodejs-proxy.html",title:"Node.js 反向代理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"nginx/example/nodejs-proxy.md",git:{updatedTime:1629648513e3,contributors:[{name:"duoli",email:"zhaody901@126.com",commits:1}]}}},6248:(n,e,s)=>{s.r(e),s.d(e,{default:()=>r});const a=(0,s(6252).uE)('<h1 id="node-js-反向代理" tabindex="-1"><a class="header-anchor" href="#node-js-反向代理" aria-hidden="true">#</a> Node.js 反向代理</h1><p>服务端如果使用<code>nodejs</code>运行服务，由于端口不能同时多个服务占用，而服务器中可能又是多个网站，那么可以使用 Nginx 做反向代理，比如有这些网站域名和端口：</p><table><thead><tr><th>域名</th><th>端口</th></tr></thead><tbody><tr><td>www.xxoo.com</td><td>8001</td></tr><tr><td>www.xo.com</td><td>8002</td></tr><tr><td>www.xo.cn</td><td>8003</td></tr></tbody></table><p>当然一个服务器上的网站可能还有更多，可以通过配置 Nginx 转发来代理这些端口分发，如：</p><div class="language-conf ext-conf line-numbers-mode"><pre class="language-conf"><code>server {\n    server_name www.xxoo.com;\n    listen 80;\n\n    # 设置这个网站的根目录\n    root /wwwroot/www.xxoo.com/;\n\n    # 由于下面配置了文件不存在则代码到 Node.js 中，那么直接访问目录（不带默认主页）的话会有问题，这里做下判断\n    # 如果访问目录下有 index.html 文件，则直接重写到该文件\n    # break 表示重写且停止，但 url 不变，而 permanent 表示301重定向，url 会更新\n    if ( -f $request_filename/index.html ){\n        rewrite (.*) $1/index.html break;\n    }\n\n    # 如果请求的文件不存在，则代理到 Node.js\n    if ( !-f $request_filename ){\n        rewrite (.*) /index.js;\n    }\n\n    # 代理node服务 8001\n    location = /index.js {\n        # 设置一些代理的header信息，这些信息将被透传到 Node.js 服务的header信息里\n        proxy_set_header Connection &quot;&quot;;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n\n        # 代理服务\n        proxy_pass http://127.0.0.1:8001$request_uri;\n\n        # 忽略其他重写\n        proxy_redirect off;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>配置之后，比如你网站根目录里有 <code>index.html</code> 文件，访问 <code>url</code> 如：</p><table><thead><tr><th>访问链接</th><th>解析过程</th><th>备注</th></tr></thead><tbody><tr><td>www.xxoo.com/index.html</td><td>Nginx</td><td>由于文件存在，直接使用 Nginx 输出</td></tr><tr><td>www.xxoo.com</td><td>Nginx</td><td>由于判断该目录下有 <code>index.html</code> 文件，则自动重写到该文件，但 <code>url</code> 不变</td></tr><tr><td>www.xxoo.com/xx.html</td><td>Nginx -&gt; Node.js:8001</td><td>由于文件不存在，使用 Nginx 代理到 Node.js 的 8001 端口</td></tr><tr><td>www.xxoo.com/xxoo/</td><td>Nginx -&gt; Node.js:8001</td><td>首先判断该目录是否存在<br>如果存在再判断是否有 <code>index.html</code> 文件<br>一旦不成立，直接代理到 Node.js</td></tr></tbody></table>',7),r={render:function(n,e){return a}}}}]);