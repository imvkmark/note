"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8654],{4454:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-97cc4f38",path:"/nginx/example/proxy_pass.html",title:"proxy_pass url 反向代理的坑",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"url 只是 host",slug:"url-只是-host",children:[]},{level:2,title:"url 包含路径",slug:"url-包含路径",children:[]},{level:2,title:"当 proxy_pass 遇到正则",slug:"当-proxy-pass-遇到正则",children:[]},{level:2,title:"重写代理链接 - url rewrite",slug:"重写代理链接-url-rewrite",children:[]}],filePathRelative:"nginx/example/proxy_pass.md",git:{updatedTime:1629648513e3,contributors:[{name:"duoli",email:"zhaody901@126.com",commits:1}]}}},6178:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="proxy-pass-url-反向代理的坑" tabindex="-1"><a class="header-anchor" href="#proxy-pass-url-反向代理的坑" aria-hidden="true">#</a> proxy_pass url 反向代理的坑</h1><p>说到 Nginx 就不得不说 Nginx 的反向代理是多么的好用，一个指令 <code>proxy_pass</code> 搞定反向代理，对于接口代理、负载均衡很是实用，但 <code>proxy_pass</code> 指令后面的参数很有讲究。</p><p>网上有很多什么绝对路径、相对路径的说法，其实在实际的应用中就分为两种情况：</p><h2 id="url-只是-host" tabindex="-1"><a class="header-anchor" href="#url-只是-host" aria-hidden="true">#</a> url 只是 host</h2><p>这里指不包含 <code>$uri</code> ，如：</p><ul><li><code>http://host</code> - √</li><li><code>https://host</code> - √</li><li><code>http://host:port</code> - √</li><li><code>https://host:port</code> - √</li><li><code>http://host/</code> - x</li><li><code>http://host:port/</code> - x</li></ul><p>这时候 <code>location</code> 匹配的完整路径将直接透传给 url ，如：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code>// 访问：   /                               后端：   /\n// 访问：   /api/xx                         后端：   /api/xx\n// 访问：   /api/xx?aa                      后端：   /api/xx?aa\n<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// 访问：   /api/                           后端：   /api/\n// 访问：   /api/xx                         后端：   /api/xx\n// 访问：   /api/xx?aa                      后端：   /api/xx?aa\n// 访问：   /api-xx?aa                      后端：\n<span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// 访问：   /api/                           后端：   /api/\n// 访问：   /api/xx                         后端：   /api/xx\n// 访问：   /api/xx?aa                      后端：   /api/xx?aa\n// 访问：   /api-xx?aa                      后端：   /api-xx?aa\n<span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="url-包含路径" tabindex="-1"><a class="header-anchor" href="#url-包含路径" aria-hidden="true">#</a> url 包含路径</h2><p>注意，这里的路径哪怕只是一个 <code>/</code> 也是存在的，如：</p><ul><li><code>http://host</code> - x</li><li><code>https//host/</code> - √</li><li><code>http://host:port</code> - x</li><li><code>https://host:port/</code> - √</li><li><code>http://host/api</code> - √</li><li><code>http://host/api/</code> - √</li></ul><p>当 <code>proxy_pass url</code> 的 <code>url</code> 包含路径时，匹配时会根据 <code>location</code> 的匹配后的链接透传给 <code>url</code> ，注意匹配后就是这样：</p><table><thead><tr><th><code>location</code> 规则</th><th>访问的原始链接</th><th>匹配之后的路径</th></tr></thead><tbody><tr><td><code>location /</code></td><td><code>/</code></td><td><code></code></td></tr><tr><td><code>location /</code></td><td><code>/a</code></td><td><code>a</code></td></tr><tr><td><code>location /</code></td><td><code>/a/b/c?d</code></td><td><code>a/b/c?d</code></td></tr><tr><td><code>location /a/</code></td><td><code>/a/</code></td><td><code></code></td></tr><tr><td><code>location /a/</code></td><td><code>/a/b/c?d</code></td><td><code>b/c?d</code></td></tr></tbody></table><p>明白匹配之后的路径后，在 <code>proxy_pass url</code> 包含路径时，将会把匹配之后的路径透传给 <code>url</code> ，如：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code>// 访问：   /                               后端：   /\n// 访问：   /api/xx                         后端：   /api/xx\n// 访问：   /api/xx?aa                      后端：   /api/xx?aa\n<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// 访问：   /api/                           后端：   /\n// 访问：   /api/xx                         后端：   /xx\n// 访问：   /api/xx?aa                      后端：   /xx?aa\n// 访问：   /api-xx?aa                      未匹配\n<span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// 访问：   /api                            后端：   /\n// 访问：   /api/                           后端：   //\n// 访问：   /api/xx                         后端：   //xx\n// 访问：   /api/xx?aa                      后端：   //xx?aa\n// 访问：   /api-xx?aa                      后端：   /-xx?aa\n<span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// 访问：   /api/                           后端：   /v1\n// 访问：   /api/xx                         后端：   /v1xx\n// 访问：   /api/xx?aa                      后端：   /v1xx\n// 访问：   /api-xx?aa                      未匹配\n<span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080/v1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n// 访问：   /api/                           后端：   /v1/\n// 访问：   /api/xx                         后端：   /v1/xx\n// 访问：   /api/xx?aa                      后端：   /v1/xx\n// 访问：   /api-xx?aa                      未匹配\n<span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080/v1/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>由以上规则可以看出，当 <code>proxy_pass url</code> 中包含路径时，结尾的 <code>/</code> 最好同 <code>location</code> 匹配规则一致。</p><h2 id="当-proxy-pass-遇到正则" tabindex="-1"><a class="header-anchor" href="#当-proxy-pass-遇到正则" aria-hidden="true">#</a> 当 proxy_pass 遇到正则</h2><p>当 <code>location</code> 以正则形式匹配时，<code>proxy_pass</code> 就不能以 <code>/</code> 结束了，也就是不能包含路径了，比如错误的：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ~* ^/api/</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://host/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$uri</span> ~* ^/api/)</span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">proxy_pass</span> http://host/</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>解决办法就是把链接中的路径去掉。</p><h2 id="重写代理链接-url-rewrite" tabindex="-1"><a class="header-anchor" href="#重写代理链接-url-rewrite" aria-hidden="true">#</a> 重写代理链接 - url rewrite</h2><p>当原始链接（浏览器访问的链接）和代理服务器链接规则不一致时，可以使用 Nginx URL Rewrite 功能去动态的重写，如：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> ~* ^/api/</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">rewrite</span> ^/api/(.*) /?path=<span class="token variable">$1</span> break</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上请求会把匹配 <code>/api/</code> 的链接重写为 <code>/?path=</code> 的链接透传给 <code>node:8080</code> 服务，有意思的是当使用 <code>rewrite</code> 指令并且生效后，<code>proxy_pass url</code> 链接中的路径会被忽略，如：</p><div class="language-nginx ext-nginx line-numbers-mode"><pre class="language-nginx"><code>// 访问：   /                               后端：   /node/\n// 访问：   /api                            后端：   /node/api\n// 访问：   /api/                           后端：   /?path=\n// 访问：   /api/a/b/c                      后端：   /?path=a/b/c\n<span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">rewrite</span> ^/api/(.*) /?path=<span class="token variable">$1</span> break</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">proxy_pass</span> http://node:8080/node/</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',25),p={render:function(n,s){return e}}}}]);